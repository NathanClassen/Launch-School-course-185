#! /usr/bin/env ruby
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expense
    system 'clear'
    result = @connection.exec "SELECT * FROM expenses ORDER BY created_on ASC"
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on)
                                 VALUES
                                 ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expense(term)
    system 'clear'
    sql = "SELECT * FROM expenses WHERE memo ILIKE '%#{term}%'"
    result = @connection.exec(sql)
    display_count(result)           
    display_expenses(result) if result.ntuples > 0
  end

  def delete_at(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted."
      display_expenses(result)
    else
      puts "There is no expense with and id of '#{id}'."
    end
  end

  def clear_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted"
  end

  private

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There #{count == 1 ? 'is' : 'are' } #{count} expense#{"s" if count != 1}."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end

    puts "-" * 50

    amount_sum = expenses.field_values("amount").map(&:to_f).sum
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end

  def setup_schema
    table = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
    create_schema if table[0]["count"] == "0"
  end

  def create_schema
    @connection.exec <<~SQL
      CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
        memo text NOT NULL,
        created_on date NOT NULL
      );
    SQL
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    case args.first
    when 'list'
      @application.list_expense
    when 'add'
      amount, memo = args[1].to_f, args[2]
      abort "You must provide an amount and a memo." unless amount && memo
      @application.add_expense(amount, memo)
    when 'search'
      @application.search_expense(args[1])
    when 'delete'
      @application.delete_at(args[1])
    when 'clear'
      puts "This will delete all recorded expenses. Are you sure? ('y'/'n')"
      answer = $stdin.getch
      @application.clear_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    system 'clear'
    puts <<~HELP
      ---------------------------
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
      ---------------------------
    HELP
  end
end

CLI.new.run(ARGV)